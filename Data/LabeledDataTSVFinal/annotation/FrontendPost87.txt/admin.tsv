#FORMAT=WebAnno TSV 3.3
#T_SP=custom.Span|label


#Text=Job DiscriptionJob Location is Based out of Dehradun/Bangalore.
1-1	0-3	Job	_	
1-2	4-18	DiscriptionJob	_	
1-3	19-27	Location	_	
1-4	28-30	is	_	
1-5	31-36	Based	_	
1-6	37-40	out	_	
1-7	41-43	of	_	
1-8	44-52	Dehradun	_	
1-9	52-53	/	_	
1-10	53-62	Bangalore	_	
1-11	62-63	.	_	

#Text=It will be a Hybrid Work time culture...We are looking for a JavaScript developer who is proficient with React.js.
2-1	64-66	It	_	
2-2	67-71	will	_	
2-3	72-74	be	_	
2-4	75-76	a	_	
2-5	77-83	Hybrid	_	
2-6	84-88	Work	_	
2-7	89-93	time	_	
2-8	94-101	culture	_	
2-9	101-102	.	_	
2-10	102-103	.	_	
2-11	103-104	.	_	
2-12	104-106	We	_	
2-13	107-110	are	_	
2-14	111-118	looking	_	
2-15	119-122	for	_	
2-16	123-124	a	_	
2-17	125-135	JavaScript	Hard Skill	
2-18	136-145	developer	_	
2-19	146-149	who	_	
2-20	150-152	is	_	
2-21	153-163	proficient	_	
2-22	164-168	with	_	
2-23	169-177	React.js	_	
2-24	177-178	.	_	

#Text=Your primary focus will be on developing user interface components and implementing them following well-known React.js workflows (such as Flux or Redux).
3-1	179-183	Your	_	
3-2	184-191	primary	_	
3-3	192-197	focus	_	
3-4	198-202	will	_	
3-5	203-205	be	_	
3-6	206-208	on	_	
3-7	209-219	developing	_	
3-8	220-224	user	_	
3-9	225-234	interface	_	
3-10	235-245	components	_	
3-11	246-249	and	_	
3-12	250-262	implementing	_	
3-13	263-267	them	_	
3-14	268-277	following	_	
3-15	278-288	well-known	_	
3-16	289-297	React.js	_	
3-17	298-307	workflows	_	
3-18	308-309	(	_	
3-19	309-313	such	_	
3-20	314-316	as	_	
3-21	317-321	Flux	_	
3-22	322-324	or	_	
3-23	325-330	Redux	_	
3-24	330-331	)	_	
3-25	331-332	.	_	

#Text=You will ensure that these components and the overall application are robust and easy to maintain.
4-1	333-336	You	_	
4-2	337-341	will	_	
4-3	342-348	ensure	_	
4-4	349-353	that	_	
4-5	354-359	these	_	
4-6	360-370	components	_	
4-7	371-374	and	_	
4-8	375-378	the	_	
4-9	379-386	overall	_	
4-10	387-398	application	_	
4-11	399-402	are	_	
4-12	403-409	robust	_	
4-13	410-413	and	_	
4-14	414-418	easy	_	
4-15	419-421	to	_	
4-16	422-430	maintain	_	
4-17	430-431	.	_	

#Text=You will coordinate with the rest of the team working on different layers of the infrastructure.
5-1	432-435	You	_	
5-2	436-440	will	_	
5-3	441-451	coordinate	_	
5-4	452-456	with	_	
5-5	457-460	the	_	
5-6	461-465	rest	_	
5-7	466-468	of	_	
5-8	469-472	the	_	
5-9	473-477	team	_	
5-10	478-485	working	_	
5-11	486-488	on	_	
5-12	489-498	different	_	
5-13	499-505	layers	_	
5-14	506-508	of	_	
5-15	509-512	the	_	
5-16	513-527	infrastructure	_	
5-17	527-528	.	_	

#Text=Therefore, a commitment to collaborative problem solving, sophisticated design, and quality product is important.ResponsibilitiesDeveloping new user-facing features using React.jsBuilding reusable components and front-end libraries for future useTranslating designs and wireframes into high quality codeOptimizing components for maximum performance across a vast array of web-capable devices and browsersSkillsStrong proficiency in JavaScript, including DOM manipulation and the JavaScript object modelThorough understanding of React.js and its core principlesExperience with popular React.js workflows (such as Flux or Redux)Familiarity with newer specifications of EcmaScriptExperience with data structure libraries (e.g., Immutable.js)Familiarity with RESTful APIsKnowledge of modern authorization mechanisms, such as JSON Web TokenFamiliarity with modern front-end build pipelines and toolsExperience with common front-end development tools such as Babel, Webpack, NPM, etc.Ability to understand business requirements and translate them into technical requirementsA knack for benchmarking and optimizationFamiliarity with code versioning tools such as Git Strong proficiency in JavaScript, including DOM manipulation and the JavaScript object model Thorough understanding of React.js and its core principles Experience with popular React.js workflows (such as Flux or Redux) Familiarity with newer specifications of EcmaScript Experience with data structure libraries (e.g., Immutable.js) Familiarity with RESTful APIs Knowledge of modern authorization mechanisms, such as JSON Web Token Familiarity with modern front-end build pipelines and tools Experience with common front-end development tools such as Babel, Webpack, NPM, etc Ability to understand business requirements and translate them into technical requirements A knack for benchmarking and optimization Familiarity with code versioning tools such as Git Your primary focus will be on developing user interface components and implementing them following well-known React.js workflows (such as Flux or Redux) You will ensure that these components and the overall application are robust and easy to maintain You will coordinate with the rest of the team working on different layers of the infrastructure Therefore, a commitment to collaborative problem solving, sophisticated design, and quality product is important Developing new user-facing features using React.js Building reusable components and front-end libraries for future use Translating designs and wireframes into high quality code Optimizing components for maximum performance across a vast array of web-capable devices and browsers
6-1	529-538	Therefore	_	
6-2	538-539	,	_	
6-3	540-541	a	_	
6-4	542-552	commitment	_	
6-5	553-555	to	_	
6-6	556-569	collaborative	Soft Skill	
6-7	570-577	problem	_	
6-8	578-585	solving	_	
6-9	585-586	,	_	
6-10	587-600	sophisticated	_	
6-11	601-607	design	Hard Skill	
6-12	607-608	,	_	
6-13	609-612	and	_	
6-14	613-620	quality	_	
6-15	621-628	product	_	
6-16	629-631	is	_	
6-17	632-668	important.ResponsibilitiesDeveloping	_	
6-18	669-672	new	_	
6-19	673-684	user-facing	_	
6-20	685-693	features	_	
6-21	694-699	using	_	
6-22	700-716	React.jsBuilding	_	
6-23	717-725	reusable	_	
6-24	726-736	components	_	
6-25	737-740	and	_	
6-26	741-750	front-end	_	
6-27	751-760	libraries	_	
6-28	761-764	for	_	
6-29	765-771	future	_	
6-30	772-786	useTranslating	_	
6-31	787-794	designs	_	
6-32	795-798	and	_	
6-33	799-809	wireframes	_	
6-34	810-814	into	_	
6-35	815-819	high	_	
6-36	820-827	quality	_	
6-37	828-842	codeOptimizing	_	
6-38	843-853	components	_	
6-39	854-857	for	_	
6-40	858-865	maximum	_	
6-41	866-877	performance	_	
6-42	878-884	across	_	
6-43	885-886	a	_	
6-44	887-891	vast	_	
6-45	892-897	array	_	
6-46	898-900	of	_	
6-47	901-912	web-capable	_	
6-48	913-920	devices	_	
6-49	921-924	and	_	
6-50	925-945	browsersSkillsStrong	_	
6-51	946-957	proficiency	_	
6-52	958-960	in	_	
6-53	961-971	JavaScript	Hard Skill	
6-54	971-972	,	_	
6-55	973-982	including	_	
6-56	983-986	DOM	_	
6-57	987-999	manipulation	_	
6-58	1000-1003	and	_	
6-59	1004-1007	the	_	
6-60	1008-1018	JavaScript	Hard Skill	
6-61	1019-1025	object	_	
6-62	1026-1039	modelThorough	_	
6-63	1040-1053	understanding	_	
6-64	1054-1056	of	_	
6-65	1057-1065	React.js	_	
6-66	1066-1069	and	_	
6-67	1070-1073	its	_	
6-68	1074-1078	core	_	
6-69	1079-1099	principlesExperience	_	
6-70	1100-1104	with	_	
6-71	1105-1112	popular	_	
6-72	1113-1121	React.js	_	
6-73	1122-1131	workflows	_	
6-74	1132-1133	(	_	
6-75	1133-1137	such	_	
6-76	1138-1140	as	_	
6-77	1141-1145	Flux	_	
6-78	1146-1148	or	_	
6-79	1149-1154	Redux	_	
6-80	1154-1155	)	_	
6-81	1155-1166	Familiarity	_	
6-82	1167-1171	with	_	
6-83	1172-1177	newer	_	
6-84	1178-1192	specifications	_	
6-85	1193-1195	of	_	
6-86	1196-1216	EcmaScriptExperience	_	
6-87	1217-1221	with	_	
6-88	1222-1226	data	_	
6-89	1227-1236	structure	_	
6-90	1237-1246	libraries	_	
6-91	1247-1248	(	_	
6-92	1248-1251	e.g	_	
6-93	1251-1252	.	_	
6-94	1252-1253	,	_	
6-95	1254-1266	Immutable.js	_	
6-96	1266-1267	)	_	
6-97	1267-1278	Familiarity	_	
6-98	1279-1283	with	_	
6-99	1284-1291	RESTful	_	
6-100	1292-1305	APIsKnowledge	_	
6-101	1306-1308	of	_	
6-102	1309-1315	modern	_	
6-103	1316-1329	authorization	_	
6-104	1330-1340	mechanisms	_	
6-105	1340-1341	,	_	
6-106	1342-1346	such	_	
6-107	1347-1349	as	_	
6-108	1350-1354	JSON	Hard Skill	
6-109	1355-1358	Web	_	
6-110	1359-1375	TokenFamiliarity	_	
6-111	1376-1380	with	_	
6-112	1381-1387	modern	_	
6-113	1388-1397	front-end	_	
6-114	1398-1403	build	_	
6-115	1404-1413	pipelines	_	
6-116	1414-1417	and	_	
6-117	1418-1433	toolsExperience	_	
6-118	1434-1438	with	_	
6-119	1439-1445	common	_	
6-120	1446-1455	front-end	_	
6-121	1456-1467	development	_	
6-122	1468-1473	tools	_	
6-123	1474-1478	such	_	
6-124	1479-1481	as	_	
6-125	1482-1487	Babel	_	
6-126	1487-1488	,	_	
6-127	1489-1496	Webpack	_	
6-128	1496-1497	,	_	
6-129	1498-1501	NPM	_	
6-130	1501-1502	,	_	
6-131	1503-1514	etc.Ability	_	
6-132	1515-1517	to	_	
6-133	1518-1528	understand	_	
6-134	1529-1537	business	_	
6-135	1538-1550	requirements	_	
6-136	1551-1554	and	_	
6-137	1555-1564	translate	_	
6-138	1565-1569	them	_	
6-139	1570-1574	into	_	
6-140	1575-1584	technical	_	
6-141	1585-1598	requirementsA	_	
6-142	1599-1604	knack	_	
6-143	1605-1608	for	_	
6-144	1609-1621	benchmarking	_	
6-145	1622-1625	and	_	
6-146	1626-1649	optimizationFamiliarity	_	
6-147	1650-1654	with	_	
6-148	1655-1659	code	_	
6-149	1660-1670	versioning	_	
6-150	1671-1676	tools	_	
6-151	1677-1681	such	_	
6-152	1682-1684	as	_	
6-153	1685-1688	Git	Hard Skill	
6-154	1689-1695	Strong	_	
6-155	1696-1707	proficiency	_	
6-156	1708-1710	in	_	
6-157	1711-1721	JavaScript	Hard Skill	
6-158	1721-1722	,	_	
6-159	1723-1732	including	_	
6-160	1733-1736	DOM	_	
6-161	1737-1749	manipulation	_	
6-162	1750-1753	and	_	
6-163	1754-1757	the	_	
6-164	1758-1768	JavaScript	Hard Skill	
6-165	1769-1775	object	_	
6-166	1776-1781	model	_	
6-167	1782-1790	Thorough	_	
6-168	1791-1804	understanding	_	
6-169	1805-1807	of	_	
6-170	1808-1816	React.js	_	
6-171	1817-1820	and	_	
6-172	1821-1824	its	_	
6-173	1825-1829	core	_	
6-174	1830-1840	principles	_	
6-175	1841-1851	Experience	_	
6-176	1852-1856	with	_	
6-177	1857-1864	popular	_	
6-178	1865-1873	React.js	_	
6-179	1874-1883	workflows	_	
6-180	1884-1885	(	_	
6-181	1885-1889	such	_	
6-182	1890-1892	as	_	
6-183	1893-1897	Flux	_	
6-184	1898-1900	or	_	
6-185	1901-1906	Redux	_	
6-186	1906-1907	)	_	
6-187	1908-1919	Familiarity	_	
6-188	1920-1924	with	_	
6-189	1925-1930	newer	_	
6-190	1931-1945	specifications	_	
6-191	1946-1948	of	_	
6-192	1949-1959	EcmaScript	_	
6-193	1960-1970	Experience	_	
6-194	1971-1975	with	_	
6-195	1976-1980	data	_	
6-196	1981-1990	structure	_	
6-197	1991-2000	libraries	_	
6-198	2001-2002	(	_	
6-199	2002-2005	e.g	_	
6-200	2005-2006	.	_	
6-201	2006-2007	,	_	
6-202	2008-2020	Immutable.js	_	
6-203	2020-2021	)	_	
6-204	2022-2033	Familiarity	_	
6-205	2034-2038	with	_	
6-206	2039-2046	RESTful	_	
6-207	2047-2051	APIs	_	
6-208	2052-2061	Knowledge	_	
6-209	2062-2064	of	_	
6-210	2065-2071	modern	_	
6-211	2072-2085	authorization	_	
6-212	2086-2096	mechanisms	_	
6-213	2096-2097	,	_	
6-214	2098-2102	such	_	
6-215	2103-2105	as	_	
6-216	2106-2110	JSON	Hard Skill	
6-217	2111-2114	Web	_	
6-218	2115-2120	Token	_	
6-219	2121-2132	Familiarity	_	
6-220	2133-2137	with	_	
6-221	2138-2144	modern	_	
6-222	2145-2154	front-end	_	
6-223	2155-2160	build	_	
6-224	2161-2170	pipelines	_	
6-225	2171-2174	and	_	
6-226	2175-2180	tools	_	
6-227	2181-2191	Experience	_	
6-228	2192-2196	with	_	
6-229	2197-2203	common	_	
6-230	2204-2213	front-end	_	
6-231	2214-2225	development	_	
6-232	2226-2231	tools	_	
6-233	2232-2236	such	_	
6-234	2237-2239	as	_	
6-235	2240-2245	Babel	_	
6-236	2245-2246	,	_	
6-237	2247-2254	Webpack	_	
6-238	2254-2255	,	_	
6-239	2256-2259	NPM	_	
6-240	2259-2260	,	_	
6-241	2261-2264	etc	_	
6-242	2265-2272	Ability	_	
6-243	2273-2275	to	_	
6-244	2276-2286	understand	_	
6-245	2287-2295	business	_	
6-246	2296-2308	requirements	_	
6-247	2309-2312	and	_	
6-248	2313-2322	translate	_	
6-249	2323-2327	them	_	
6-250	2328-2332	into	_	
6-251	2333-2342	technical	_	
6-252	2343-2355	requirements	_	
6-253	2356-2357	A	_	
6-254	2358-2363	knack	_	
6-255	2364-2367	for	_	
6-256	2368-2380	benchmarking	_	
6-257	2381-2384	and	_	
6-258	2385-2397	optimization	_	
6-259	2398-2409	Familiarity	_	
6-260	2410-2414	with	_	
6-261	2415-2419	code	_	
6-262	2420-2430	versioning	_	
6-263	2431-2436	tools	_	
6-264	2437-2441	such	_	
6-265	2442-2444	as	_	
6-266	2445-2448	Git	Hard Skill	
6-267	2449-2453	Your	_	
6-268	2454-2461	primary	_	
6-269	2462-2467	focus	_	
6-270	2468-2472	will	_	
6-271	2473-2475	be	_	
6-272	2476-2478	on	_	
6-273	2479-2489	developing	_	
6-274	2490-2494	user	_	
6-275	2495-2504	interface	_	
6-276	2505-2515	components	_	
6-277	2516-2519	and	_	
6-278	2520-2532	implementing	_	
6-279	2533-2537	them	_	
6-280	2538-2547	following	_	
6-281	2548-2558	well-known	_	
6-282	2559-2567	React.js	_	
6-283	2568-2577	workflows	_	
6-284	2578-2579	(	_	
6-285	2579-2583	such	_	
6-286	2584-2586	as	_	
6-287	2587-2591	Flux	_	
6-288	2592-2594	or	_	
6-289	2595-2600	Redux	_	
6-290	2600-2601	)	_	
6-291	2602-2605	You	_	
6-292	2606-2610	will	_	
6-293	2611-2617	ensure	_	
6-294	2618-2622	that	_	
6-295	2623-2628	these	_	
6-296	2629-2639	components	_	
6-297	2640-2643	and	_	
6-298	2644-2647	the	_	
6-299	2648-2655	overall	_	
6-300	2656-2667	application	_	
6-301	2668-2671	are	_	
6-302	2672-2678	robust	_	
6-303	2679-2682	and	_	
6-304	2683-2687	easy	_	
6-305	2688-2690	to	_	
6-306	2691-2699	maintain	_	
6-307	2700-2703	You	_	
6-308	2704-2708	will	_	
6-309	2709-2719	coordinate	_	
6-310	2720-2724	with	_	
6-311	2725-2728	the	_	
6-312	2729-2733	rest	_	
6-313	2734-2736	of	_	
6-314	2737-2740	the	_	
6-315	2741-2745	team	_	
6-316	2746-2753	working	_	
6-317	2754-2756	on	_	
6-318	2757-2766	different	_	
6-319	2767-2773	layers	_	
6-320	2774-2776	of	_	
6-321	2777-2780	the	_	
6-322	2781-2795	infrastructure	_	
6-323	2796-2805	Therefore	_	
6-324	2805-2806	,	_	
6-325	2807-2808	a	_	
6-326	2809-2819	commitment	_	
6-327	2820-2822	to	_	
6-328	2823-2836	collaborative	Soft Skill	
6-329	2837-2844	problem	_	
6-330	2845-2852	solving	_	
6-331	2852-2853	,	_	
6-332	2854-2867	sophisticated	_	
6-333	2868-2874	design	Hard Skill	
6-334	2874-2875	,	_	
6-335	2876-2879	and	_	
6-336	2880-2887	quality	_	
6-337	2888-2895	product	_	
6-338	2896-2898	is	_	
6-339	2899-2908	important	_	
6-340	2909-2919	Developing	_	
6-341	2920-2923	new	_	
6-342	2924-2935	user-facing	_	
6-343	2936-2944	features	_	
6-344	2945-2950	using	_	
6-345	2951-2959	React.js	_	
6-346	2960-2968	Building	_	
6-347	2969-2977	reusable	_	
6-348	2978-2988	components	_	
6-349	2989-2992	and	_	
6-350	2993-3002	front-end	_	
6-351	3003-3012	libraries	_	
6-352	3013-3016	for	_	
6-353	3017-3023	future	_	
6-354	3024-3027	use	_	
6-355	3028-3039	Translating	_	
6-356	3040-3047	designs	_	
6-357	3048-3051	and	_	
6-358	3052-3062	wireframes	_	
6-359	3063-3067	into	_	
6-360	3068-3072	high	_	
6-361	3073-3080	quality	_	
6-362	3081-3085	code	_	
6-363	3086-3096	Optimizing	Hard Skill	
6-364	3097-3107	components	_	
6-365	3108-3111	for	_	
6-366	3112-3119	maximum	_	
6-367	3120-3131	performance	_	
6-368	3132-3138	across	_	
6-369	3139-3140	a	_	
6-370	3141-3145	vast	_	
6-371	3146-3151	array	_	
6-372	3152-3154	of	_	
6-373	3155-3166	web-capable	_	
6-374	3167-3174	devices	_	
6-375	3175-3178	and	_	
6-376	3179-3187	browsers	_	
