#FORMAT=WebAnno TSV 3.3


#Text=1099 or Corp to Corp 6 month contractMust be USC, GC, or Perm Res willing to work onsite in Deerfield (Chicago...We are looking for an Android Developer who possesses a passion for pushing mobile technologies to the limits.
1-1	0-4	1099	
1-2	5-7	or	
1-3	8-12	Corp	
1-4	13-15	to	
1-5	16-20	Corp	
1-6	21-22	6	
1-7	23-28	month	
1-8	29-41	contractMust	
1-9	42-44	be	
1-10	45-48	USC	
1-11	48-49	,	
1-12	50-52	GC	
1-13	52-53	,	
1-14	54-56	or	
1-15	57-61	Perm	
1-16	62-65	Res	
1-17	66-73	willing	
1-18	74-76	to	
1-19	77-81	work	
1-20	82-88	onsite	
1-21	89-91	in	
1-22	92-101	Deerfield	
1-23	102-103	(	
1-24	103-110	Chicago	
1-25	110-111	.	
1-26	111-112	.	
1-27	112-113	.	
1-28	113-115	We	
1-29	116-119	are	
1-30	120-127	looking	
1-31	128-131	for	
1-32	132-134	an	
1-33	135-142	Android	
1-34	143-152	Developer	
1-35	153-156	who	
1-36	157-166	possesses	
1-37	167-168	a	
1-38	169-176	passion	
1-39	177-180	for	
1-40	181-188	pushing	
1-41	189-195	mobile	
1-42	196-208	technologies	
1-43	209-211	to	
1-44	212-215	the	
1-45	216-222	limits	
1-46	222-223	.	

#Text=This Android app developer will work with our team of talented engineers to design and build the next generation of our mobile applications.
2-1	224-228	This	
2-2	229-236	Android	
2-3	237-240	app	
2-4	241-250	developer	
2-5	251-255	will	
2-6	256-260	work	
2-7	261-265	with	
2-8	266-269	our	
2-9	270-274	team	
2-10	275-277	of	
2-11	278-286	talented	
2-12	287-296	engineers	
2-13	297-299	to	
2-14	300-306	design	
2-15	307-310	and	
2-16	311-316	build	
2-17	317-320	the	
2-18	321-325	next	
2-19	326-336	generation	
2-20	337-339	of	
2-21	340-343	our	
2-22	344-350	mobile	
2-23	351-363	applications	
2-24	363-364	.	

#Text=Android programming works closely with other app development and technical teams.Responsibilities Design and build advanced applications for the Android platform Work with outside data sources and APIs Work on bug fixing and improving application performance Collaborate with cross-functional teams to define, design, and ship new features Unit-test code for robustness, including edge cases, usability, and general reliability Designing and developing modern, secure, and feature-rich android applications using Kotlin from scratch.
3-1	365-372	Android	
3-2	373-384	programming	
3-3	385-390	works	
3-4	391-398	closely	
3-5	399-403	with	
3-6	404-409	other	
3-7	410-413	app	
3-8	414-425	development	
3-9	426-429	and	
3-10	430-439	technical	
3-11	440-462	teams.Responsibilities	
3-12	463-469	Design	
3-13	470-473	and	
3-14	474-479	build	
3-15	480-488	advanced	
3-16	489-501	applications	
3-17	502-505	for	
3-18	506-509	the	
3-19	510-517	Android	
3-20	518-526	platform	
3-21	527-531	Work	
3-22	532-536	with	
3-23	537-544	outside	
3-24	545-549	data	
3-25	550-557	sources	
3-26	558-561	and	
3-27	562-566	APIs	
3-28	567-571	Work	
3-29	572-574	on	
3-30	575-578	bug	
3-31	579-585	fixing	
3-32	586-589	and	
3-33	590-599	improving	
3-34	600-611	application	
3-35	612-623	performance	
3-36	624-635	Collaborate	
3-37	636-640	with	
3-38	641-657	cross-functional	
3-39	658-663	teams	
3-40	664-666	to	
3-41	667-673	define	
3-42	673-674	,	
3-43	675-681	design	
3-44	681-682	,	
3-45	683-686	and	
3-46	687-691	ship	
3-47	692-695	new	
3-48	696-704	features	
3-49	705-714	Unit-test	
3-50	715-719	code	
3-51	720-723	for	
3-52	724-734	robustness	
3-53	734-735	,	
3-54	736-745	including	
3-55	746-750	edge	
3-56	751-756	cases	
3-57	756-757	,	
3-58	758-767	usability	
3-59	767-768	,	
3-60	769-772	and	
3-61	773-780	general	
3-62	781-792	reliability	
3-63	793-802	Designing	
3-64	803-806	and	
3-65	807-817	developing	
3-66	818-824	modern	
3-67	824-825	,	
3-68	826-832	secure	
3-69	832-833	,	
3-70	834-837	and	
3-71	838-850	feature-rich	
3-72	851-858	android	
3-73	859-871	applications	
3-74	872-877	using	
3-75	878-884	Kotlin	
3-76	885-889	from	
3-77	890-897	scratch	
3-78	897-898	.	

#Text=Understand requirements and translate designs and wireframes into code.
4-1	899-909	Understand	
4-2	910-922	requirements	
4-3	923-926	and	
4-4	927-936	translate	
4-5	937-944	designs	
4-6	945-948	and	
4-7	949-959	wireframes	
4-8	960-964	into	
4-9	965-969	code	
4-10	969-970	.	

#Text=Identify and fix bugs to improve performance.
5-1	971-979	Identify	
5-2	980-983	and	
5-3	984-987	fix	
5-4	988-992	bugs	
5-5	993-995	to	
5-6	996-1003	improve	
5-7	1004-1015	performance	
5-8	1015-1016	.	

#Text=Coordinating with the design and test teams to create apps with high performance.
6-1	1017-1029	Coordinating	
6-2	1030-1034	with	
6-3	1035-1038	the	
6-4	1039-1045	design	
6-5	1046-1049	and	
6-6	1050-1054	test	
6-7	1055-1060	teams	
6-8	1061-1063	to	
6-9	1064-1070	create	
6-10	1071-1075	apps	
6-11	1076-1080	with	
6-12	1081-1085	high	
6-13	1086-1097	performance	
6-14	1097-1098	.	

#Text=Work with APIs and data sources as per the requirements.
7-1	1099-1103	Work	
7-2	1104-1108	with	
7-3	1109-1113	APIs	
7-4	1114-1117	and	
7-5	1118-1122	data	
7-6	1123-1130	sources	
7-7	1131-1133	as	
7-8	1134-1137	per	
7-9	1138-1141	the	
7-10	1142-1154	requirements	
7-11	1154-1155	.	

#Text=Help maintain code quality, reusability, and continuous code evaluation.
8-1	1156-1160	Help	
8-2	1161-1169	maintain	
8-3	1170-1174	code	
8-4	1175-1182	quality	
8-5	1182-1183	,	
8-6	1184-1195	reusability	
8-7	1195-1196	,	
8-8	1197-1200	and	
8-9	1201-1211	continuous	
8-10	1212-1216	code	
8-11	1217-1227	evaluation	
8-12	1227-1228	.	

#Text=Discover and implement new technologies to improve the developer experience.
9-1	1229-1237	Discover	
9-2	1238-1241	and	
9-3	1242-1251	implement	
9-4	1252-1255	new	
9-5	1256-1268	technologies	
9-6	1269-1271	to	
9-7	1272-1279	improve	
9-8	1280-1283	the	
9-9	1284-1293	developer	
9-10	1294-1304	experience	
9-11	1304-1305	.	

#Text=Unit-testing of code to ensure bug-free, reliable, and best user experience.
10-1	1306-1318	Unit-testing	
10-2	1319-1321	of	
10-3	1322-1326	code	
10-4	1327-1329	to	
10-5	1330-1336	ensure	
10-6	1337-1345	bug-free	
10-7	1345-1346	,	
10-8	1347-1355	reliable	
10-9	1355-1356	,	
10-10	1357-1360	and	
10-11	1361-1365	best	
10-12	1366-1370	user	
10-13	1371-1381	experience	
10-14	1381-1382	.	

#Text=Collaborate with the team members to plan, develop, and ship new features.
11-1	1383-1394	Collaborate	
11-2	1395-1399	with	
11-3	1400-1403	the	
11-4	1404-1408	team	
11-5	1409-1416	members	
11-6	1417-1419	to	
11-7	1420-1424	plan	
11-8	1424-1425	,	
11-9	1426-1433	develop	
11-10	1433-1434	,	
11-11	1435-1438	and	
11-12	1439-1443	ship	
11-13	1444-1447	new	
11-14	1448-1456	features	
11-15	1456-1457	.	

#Text=Implement security measures in line with overall security objectives.
12-1	1458-1467	Implement	
12-2	1468-1476	security	
12-3	1477-1485	measures	
12-4	1486-1488	in	
12-5	1489-1493	line	
12-6	1494-1498	with	
12-7	1499-1506	overall	
12-8	1507-1515	security	
12-9	1516-1526	objectives	
12-10	1526-1527	.	

#Text=Plan, develop, build, and release end-to-end Android mobile app using Kotlin Educate staff members through training and individual support.
13-1	1528-1532	Plan	
13-2	1532-1533	,	
13-3	1534-1541	develop	
13-4	1541-1542	,	
13-5	1543-1548	build	
13-6	1548-1549	,	
13-7	1550-1553	and	
13-8	1554-1561	release	
13-9	1562-1572	end-to-end	
13-10	1573-1580	Android	
13-11	1581-1587	mobile	
13-12	1588-1591	app	
13-13	1592-1597	using	
13-14	1598-1604	Kotlin	
13-15	1605-1612	Educate	
13-16	1613-1618	staff	
13-17	1619-1626	members	
13-18	1627-1634	through	
13-19	1635-1643	training	
13-20	1644-1647	and	
13-21	1648-1658	individual	
13-22	1659-1666	support	
13-23	1666-1667	.	

#Text=Offer support by responding to system problems in a timely manner.
14-1	1668-1673	Offer	
14-2	1674-1681	support	
14-3	1682-1684	by	
14-4	1685-1695	responding	
14-5	1696-1698	to	
14-6	1699-1705	system	
14-7	1706-1714	problems	
14-8	1715-1717	in	
14-9	1718-1719	a	
14-10	1720-1726	timely	
14-11	1727-1733	manner	
14-12	1733-1734	.	

#Text=Understand and document data flows in and between different systems/applications Guidance to developers in preparing functional/technical specs to define reporting requirement and ETL process Proven working experience in Android app development and Solid understanding of the full mobile development life cycle Proven working experience in Android app development and Solid understanding of the full mobile development life cycle Design and build advanced applications for the Android platform Work on bug fixing and improving application performance Collaborate with cross-functional teams to define, design, and ship new features Unit-test code for robustness, including edge cases, usability, and general reliability Designing and developing modern, secure, and feature-rich android applications using Kotlin from scratch Understand requirements and translate designs and wireframes into code Coordinating with the design and test teams to create apps with high performance Work with APIs and data sources as per the requirements Help maintain code quality, reusability, and continuous code evaluation Discover and implement new technologies to improve the developer experience Unit-testing of code to ensure bug-free, reliable, and best user experience Collaborate with the team members to plan, develop, and ship new features Implement security measures in line with overall security objectives Plan, develop, build, and release end-to-end Android mobile app using Kotlin Educate staff members through training and individual support Offer support by responding to system problems in a timely manner Understand and document data flows in and between different systems/applications Guidance to developers in preparing functional/technical specs to define reporting requirement and ETL process
15-1	1735-1745	Understand	
15-2	1746-1749	and	
15-3	1750-1758	document	
15-4	1759-1763	data	
15-5	1764-1769	flows	
15-6	1770-1772	in	
15-7	1773-1776	and	
15-8	1777-1784	between	
15-9	1785-1794	different	
15-10	1795-1802	systems	
15-11	1802-1803	/	
15-12	1803-1815	applications	
15-13	1816-1824	Guidance	
15-14	1825-1827	to	
15-15	1828-1838	developers	
15-16	1839-1841	in	
15-17	1842-1851	preparing	
15-18	1852-1862	functional	
15-19	1862-1863	/	
15-20	1863-1872	technical	
15-21	1873-1878	specs	
15-22	1879-1881	to	
15-23	1882-1888	define	
15-24	1889-1898	reporting	
15-25	1899-1910	requirement	
15-26	1911-1914	and	
15-27	1915-1918	ETL	
15-28	1919-1926	process	
15-29	1927-1933	Proven	
15-30	1934-1941	working	
15-31	1942-1952	experience	
15-32	1953-1955	in	
15-33	1956-1963	Android	
15-34	1964-1967	app	
15-35	1968-1979	development	
15-36	1980-1983	and	
15-37	1984-1989	Solid	
15-38	1990-2003	understanding	
15-39	2004-2006	of	
15-40	2007-2010	the	
15-41	2011-2015	full	
15-42	2016-2022	mobile	
15-43	2023-2034	development	
15-44	2035-2039	life	
15-45	2040-2045	cycle	
15-46	2046-2052	Proven	
15-47	2053-2060	working	
15-48	2061-2071	experience	
15-49	2072-2074	in	
15-50	2075-2082	Android	
15-51	2083-2086	app	
15-52	2087-2098	development	
15-53	2099-2102	and	
15-54	2103-2108	Solid	
15-55	2109-2122	understanding	
15-56	2123-2125	of	
15-57	2126-2129	the	
15-58	2130-2134	full	
15-59	2135-2141	mobile	
15-60	2142-2153	development	
15-61	2154-2158	life	
15-62	2159-2164	cycle	
15-63	2165-2171	Design	
15-64	2172-2175	and	
15-65	2176-2181	build	
15-66	2182-2190	advanced	
15-67	2191-2203	applications	
15-68	2204-2207	for	
15-69	2208-2211	the	
15-70	2212-2219	Android	
15-71	2220-2228	platform	
15-72	2229-2233	Work	
15-73	2234-2236	on	
15-74	2237-2240	bug	
15-75	2241-2247	fixing	
15-76	2248-2251	and	
15-77	2252-2261	improving	
15-78	2262-2273	application	
15-79	2274-2285	performance	
15-80	2286-2297	Collaborate	
15-81	2298-2302	with	
15-82	2303-2319	cross-functional	
15-83	2320-2325	teams	
15-84	2326-2328	to	
15-85	2329-2335	define	
15-86	2335-2336	,	
15-87	2337-2343	design	
15-88	2343-2344	,	
15-89	2345-2348	and	
15-90	2349-2353	ship	
15-91	2354-2357	new	
15-92	2358-2366	features	
15-93	2367-2376	Unit-test	
15-94	2377-2381	code	
15-95	2382-2385	for	
15-96	2386-2396	robustness	
15-97	2396-2397	,	
15-98	2398-2407	including	
15-99	2408-2412	edge	
15-100	2413-2418	cases	
15-101	2418-2419	,	
15-102	2420-2429	usability	
15-103	2429-2430	,	
15-104	2431-2434	and	
15-105	2435-2442	general	
15-106	2443-2454	reliability	
15-107	2455-2464	Designing	
15-108	2465-2468	and	
15-109	2469-2479	developing	
15-110	2480-2486	modern	
15-111	2486-2487	,	
15-112	2488-2494	secure	
15-113	2494-2495	,	
15-114	2496-2499	and	
15-115	2500-2512	feature-rich	
15-116	2513-2520	android	
15-117	2521-2533	applications	
15-118	2534-2539	using	
15-119	2540-2546	Kotlin	
15-120	2547-2551	from	
15-121	2552-2559	scratch	
15-122	2560-2570	Understand	
15-123	2571-2583	requirements	
15-124	2584-2587	and	
15-125	2588-2597	translate	
15-126	2598-2605	designs	
15-127	2606-2609	and	
15-128	2610-2620	wireframes	
15-129	2621-2625	into	
15-130	2626-2630	code	
15-131	2631-2643	Coordinating	
15-132	2644-2648	with	
15-133	2649-2652	the	
15-134	2653-2659	design	
15-135	2660-2663	and	
15-136	2664-2668	test	
15-137	2669-2674	teams	
15-138	2675-2677	to	
15-139	2678-2684	create	
15-140	2685-2689	apps	
15-141	2690-2694	with	
15-142	2695-2699	high	
15-143	2700-2711	performance	
15-144	2712-2716	Work	
15-145	2717-2721	with	
15-146	2722-2726	APIs	
15-147	2727-2730	and	
15-148	2731-2735	data	
15-149	2736-2743	sources	
15-150	2744-2746	as	
15-151	2747-2750	per	
15-152	2751-2754	the	
15-153	2755-2767	requirements	
15-154	2768-2772	Help	
15-155	2773-2781	maintain	
15-156	2782-2786	code	
15-157	2787-2794	quality	
15-158	2794-2795	,	
15-159	2796-2807	reusability	
15-160	2807-2808	,	
15-161	2809-2812	and	
15-162	2813-2823	continuous	
15-163	2824-2828	code	
15-164	2829-2839	evaluation	
15-165	2840-2848	Discover	
15-166	2849-2852	and	
15-167	2853-2862	implement	
15-168	2863-2866	new	
15-169	2867-2879	technologies	
15-170	2880-2882	to	
15-171	2883-2890	improve	
15-172	2891-2894	the	
15-173	2895-2904	developer	
15-174	2905-2915	experience	
15-175	2916-2928	Unit-testing	
15-176	2929-2931	of	
15-177	2932-2936	code	
15-178	2937-2939	to	
15-179	2940-2946	ensure	
15-180	2947-2955	bug-free	
15-181	2955-2956	,	
15-182	2957-2965	reliable	
15-183	2965-2966	,	
15-184	2967-2970	and	
15-185	2971-2975	best	
15-186	2976-2980	user	
15-187	2981-2991	experience	
15-188	2992-3003	Collaborate	
15-189	3004-3008	with	
15-190	3009-3012	the	
15-191	3013-3017	team	
15-192	3018-3025	members	
15-193	3026-3028	to	
15-194	3029-3033	plan	
15-195	3033-3034	,	
15-196	3035-3042	develop	
15-197	3042-3043	,	
15-198	3044-3047	and	
15-199	3048-3052	ship	
15-200	3053-3056	new	
15-201	3057-3065	features	
15-202	3066-3075	Implement	
15-203	3076-3084	security	
15-204	3085-3093	measures	
15-205	3094-3096	in	
15-206	3097-3101	line	
15-207	3102-3106	with	
15-208	3107-3114	overall	
15-209	3115-3123	security	
15-210	3124-3134	objectives	
15-211	3135-3139	Plan	
15-212	3139-3140	,	
15-213	3141-3148	develop	
15-214	3148-3149	,	
15-215	3150-3155	build	
15-216	3155-3156	,	
15-217	3157-3160	and	
15-218	3161-3168	release	
15-219	3169-3179	end-to-end	
15-220	3180-3187	Android	
15-221	3188-3194	mobile	
15-222	3195-3198	app	
15-223	3199-3204	using	
15-224	3205-3211	Kotlin	
15-225	3212-3219	Educate	
15-226	3220-3225	staff	
15-227	3226-3233	members	
15-228	3234-3241	through	
15-229	3242-3250	training	
15-230	3251-3254	and	
15-231	3255-3265	individual	
15-232	3266-3273	support	
15-233	3274-3279	Offer	
15-234	3280-3287	support	
15-235	3288-3290	by	
15-236	3291-3301	responding	
15-237	3302-3304	to	
15-238	3305-3311	system	
15-239	3312-3320	problems	
15-240	3321-3323	in	
15-241	3324-3325	a	
15-242	3326-3332	timely	
15-243	3333-3339	manner	
15-244	3340-3350	Understand	
15-245	3351-3354	and	
15-246	3355-3363	document	
15-247	3364-3368	data	
15-248	3369-3374	flows	
15-249	3375-3377	in	
15-250	3378-3381	and	
15-251	3382-3389	between	
15-252	3390-3399	different	
15-253	3400-3407	systems	
15-254	3407-3408	/	
15-255	3408-3420	applications	
15-256	3421-3429	Guidance	
15-257	3430-3432	to	
15-258	3433-3443	developers	
15-259	3444-3446	in	
15-260	3447-3456	preparing	
15-261	3457-3467	functional	
15-262	3467-3468	/	
15-263	3468-3477	technical	
15-264	3478-3483	specs	
15-265	3484-3486	to	
15-266	3487-3493	define	
15-267	3494-3503	reporting	
15-268	3504-3515	requirement	
15-269	3516-3519	and	
15-270	3520-3523	ETL	
15-271	3524-3531	process	
